const {promisify} = require('util')
const glob = promisify(require('glob'))
const fs = require('fs').promises
const path = require('path')
const mkdirp = require('mkdirp')
const xml2js = require('xml2js')

const prefix = "datamine.tmp/"
const dest = "datamine/"

function main() {
  Promise.all([
    glob(prefix + "localization/text_ui_{Loot,Activeskills,EIM}.xml", null),
    glob(prefix + "Game/Umbra/Loot/Armors/{Armors,Accessories,Armors_unique,UniquesAccessories}*", null),
    glob(prefix + "Game/Umbra/Loot/Weapons/{Unique,}{Weapons,Shields}*", null),
    glob(prefix + "Game/Umbra/Loot/MagicEffects/Affixes/Armors_Weapons/Affixes{Implicit,Uniques}.xml", null),
    glob(prefix + "Game/Umbra/Skills/NewSkills/Player/Player_*", null),
    glob(prefix + "Game/Umbra/Skills/Trees/ActiveSkills/*.xml", null),
  ])
  .then(groups => groups.map(group => group.map(path => path.replace(/^datamine.tmp\//, ''))))
  .then(groups => {
    const paths = flatten(groups)
    // console.log('paths', paths)
    // create directory structure first
    return Promise.all(paths.map(p =>
      mkdirp(path.dirname(dest + p))
    ))
    .then(() => Promise.all([
      // copy the unchanged xml files.
      // copied files are committed to git
      Promise.all(paths.map(p => fs.copyFile(prefix + p, dest + p))),
      // convert xml to json
      Promise.all(paths.map(p => {
        fs.readFile(prefix + p)
        .then(xml => promisify((new xml2js.Parser()).parseString)(xml))
        .then(json => fs.writeFile(dest + p.replace(/\.xml$/, '.json'), JSON.stringify(json, null, 2)))
      })),
      // create a js file that imports the above stuff
      generateImports(groups),
    ]))
  })
  .catch(err => {
    console.error(err)
    process.exit(1)
  })
}
function generateImports(groups) {
  const _output = []
  const output = line => _output.push(line)

  const localization = groups[0]
  const game = flatten(groups.slice(1))

  output("// Autogenerated by src/import_datamine.js. Do not edit!")
  output()
  for (let [i, xml] of game.entries()) {
    // xml files under datamine/Game/ are plain old xml files. Elm parses them as xml.
    output(`import game_${i} from "!!raw-loader!../datamine/${xml}"`)
  }
  for (let [i, xml] of localization.entries()) {
    // xml files under datamine/localization/ are excel spreadsheets! They also break Elm's xml parser.
    // So, convert them to json with spreadsheet tools we've used in the past. Elm parses them as json.
    output(`import localization_${i} from "!!json-loader!@erosson/xlsx-loader!../datamine/${xml}"`)
  }
  // TODO localization
  output()
  output("export default {")
  for (let [i, xml] of game.entries()) {
    output(`  "${xml}": game_${i},`)
  }
  for (let [i, xml] of localization.entries()) {
    output(`  "${xml}": localization_${i},`)
  }
  output("}")
  return fs.writeFile(dest + 'imports.js', _output.join('\n'))
}
const flatten = as => [].concat.apply([], as)

main()

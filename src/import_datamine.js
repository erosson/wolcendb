const {promisify} = require('util')
const glob = promisify(require('glob'))
const fs = require('fs').promises

const _output = []
const output = line => _output.push(line)
function flush() {
  fs.writeFile('datamine/imports.js', _output.join('\n'))
}

Promise.all([
  glob("datamine/Game/**/*.xml", null),
  glob("datamine/localization/**/*.xml", null),
])
.then(paths => paths.map(group => group.map(path => path.replace(/^datamine\//, ''))))
.then(([game, localization]) => {
  output("// Autogenerated by src/import_datamine.js. Do not edit!")
  output()
  for (let [i, xml] of game.entries()) {
    // xml files under datamine/Game/ are plain old xml files. Elm parses them as xml.
    output(`import game_${i} from "!!raw-loader!../datamine/${xml}"`)
  }
  for (let [i, xml] of localization.entries()) {
    // xml files under datamine/localization/ are excel spreadsheets! They also break Elm's xml parser.
    // So, convert them to json with spreadsheet tools we've used in the past. Elm parses them as json.
    output(`import localization_${i} from "!!json-loader!@erosson/xlsx-loader!../datamine/${xml}"`)
  }
  // TODO localization
  output()
  output("export default {")
  for (let [i, xml] of game.entries()) {
    output(`  "${xml}": game_${i},`)
  }
  for (let [i, xml] of localization.entries()) {
    output(`  "${xml}": localization_${i},`)
  }
  output("}")
  flush()
})
.catch(err => {
  console.error(err)
  process.exit(1)
})
